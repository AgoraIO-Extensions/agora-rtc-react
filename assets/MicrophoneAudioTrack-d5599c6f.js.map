{"version":3,"file":"MicrophoneAudioTrack-d5599c6f.js","sources":["../../src/components/MicrophoneAudioTrack.tsx"],"sourcesContent":["import type { IMicrophoneAudioTrack } from \"agora-rtc-sdk-ng\";\nimport type { ReactNode } from \"react\";\nimport { useEffect } from \"react\";\n\nimport { useAwaited } from \"../hooks\";\nimport type { MaybePromiseOrNull } from \"../utils\";\n\nimport type { LocalAudioTrackProps } from \"./LocalAudioTrack\";\nimport { LocalAudioTrack } from \"./LocalAudioTrack\";\n\nexport interface MicrophoneAudioTrackProps extends LocalAudioTrackProps {\n  /**\n   * A microphone audio track which can be created by `createMicrophoneAudioTrack()`.\n   */\n  readonly track?: MaybePromiseOrNull<IMicrophoneAudioTrack>;\n  /**\n   * Device ID, which can be retrieved by calling `getDevices()`.\n   */\n  readonly deviceId?: string;\n\n  readonly children?: ReactNode;\n}\n\n/**\n * A component which renders a microphone audio track, with device options.\n *\n * ```jsx\n * const track = useMemo(() => AgoraRTC.createMicrophoneAudioTrack(), [])\n * return <MicrophoneAudioTrack track={track} play />\n * ```\n */\nexport function MicrophoneAudioTrack({\n  track: maybeTrack,\n  deviceId,\n  ...props\n}: MicrophoneAudioTrackProps) {\n  const track = useAwaited(maybeTrack);\n\n  useEffect(() => {\n    if (track && deviceId != null) {\n      track.setDevice(deviceId).catch(console.warn);\n    }\n  }, [deviceId, track]);\n\n  return <LocalAudioTrack track={maybeTrack} {...props} />;\n}\n"],"names":["MicrophoneAudioTrack","maybeTrack","deviceId","props","track","useAwaited","useEffect","jsx","LocalAudioTrack"],"mappings":"wLA+BA,SAAAA,EAAA,CACA,MAAAC,EACA,SAAAC,EACA,GAAAC,CACA,EAAA,CACA,MAAAC,EAAAC,EAAAJ,CAAA,EAEAK,OAAAA,EAAAA,UAAA,IAAA,CACAF,GAAAF,GAAA,MACAE,EAAA,UAAAF,CAAA,EAAA,MAAA,QAAA,IAAA,CACA,EACA,CAAAA,EAAAE,CAAA,CAAA,EAEAG,EAAAC,EAAA,CAAA,MAAAP,EAAA,GAAAE,CAAA,CAAA,CACA;;"}