{"version":3,"file":"LocalAudioTrack-9fb4e15e.js","sources":["../../src/components/LocalAudioTrack.tsx"],"sourcesContent":["import type { ILocalAudioTrack } from \"agora-rtc-sdk-ng\";\nimport type { ReactNode } from \"react\";\nimport { useEffect } from \"react\";\n\nimport { useAwaited } from \"../hooks/tools\";\nimport type { MaybePromiseOrNull } from \"../misc/utils\";\n\nimport { useAutoPlayAudioTrack } from \"./TrackBoundary\";\n\nexport interface LocalAudioTrackProps {\n  /**\n   * The local audio track to be played. Call [`useLocalMicrophoneTrack`](https://doc.shengwang.cn/api-ref/rtc/react/react-sdk/hooks#uselocalmicrophonetrack) to create a local audio track.\n   */\n  readonly track?: MaybePromiseOrNull<ILocalAudioTrack>;\n\n  /**\n   * `true`: Play the track.`false`: Stop playing the track.\n   */\n  readonly play?: boolean;\n\n  /**\n   * The volume. The value ranges from 0 (mute) to 1000 (maximum). A value of 100 is the original volume. When set to above 100, the SDK applies volume amplification using the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API).\n   */\n  readonly volume?: number;\n\n  /**\n   * `true`: Disable the track. When disabled, the SDK stops playing and publishing the track.`false`: Enable the track.\n   */\n  readonly disabled?: boolean;\n\n  /**\n   * `true`: Pause sending media data of the track.`false`: Resume sending media data of the track.\n   */\n  readonly muted?: boolean;\n\n  /**\n   * The React nodes to be rendered.\n   */\n  readonly children?: ReactNode;\n}\n\n/**\n * This component plays the local audio track using the playback device selected by the user in the browser.\n * @example\n * ```jsx\n * import { LocalAudioTrack, useLocalAudioTrack } from \"agora-rtc-react\";\n *\n * function App() {\n *   const audioTrack = useLocalAudioTrack();\n *   return <LocalAudioTrack track={audioTrack} play />;\n * }\n * ```\n */\nexport function LocalAudioTrack({\n  track: maybeTrack,\n  play = false,\n  volume,\n  disabled,\n  muted,\n  children,\n}: LocalAudioTrackProps) {\n  const track = useAwaited(maybeTrack);\n\n  useAutoPlayAudioTrack(track, play);\n\n  useEffect(() => {\n    if (track && volume != null) {\n      track.setVolume(volume);\n    }\n  }, [track, volume]);\n\n  useEffect(() => {\n    if (track && disabled != null) {\n      track.setEnabled(!disabled).catch(console.warn);\n    }\n  }, [disabled, track]);\n\n  useEffect(() => {\n    if (track && muted != null) {\n      track.setMuted(muted).catch(console.warn);\n    }\n  }, [muted, track]);\n\n  return children ? <>{children}</> : null;\n}\n"],"names":["LocalAudioTrack","maybeTrack","play","volume","disabled","muted","children","track","useAwaited","useAutoPlayAudioTrack","useEffect","jsx","Fragment"],"mappings":"6IAqDA,SAAAA,EAAA,CACA,MAAAC,EACA,KAAAC,EAAA,GACA,OAAAC,EACA,SAAAC,EACA,MAAAC,EACA,SAAAC,CACA,EAAA,CACA,MAAAC,EAAAC,EAAAP,CAAA,EAEA,OAAAQ,EAAAF,EAAAL,CAAA,EAEAQ,EAAAA,UAAA,IAAA,CACAH,GAAAJ,GAAA,MACAI,EAAA,UAAAJ,CAAA,CACA,EACA,CAAAI,EAAAJ,CAAA,CAAA,EAEAO,EAAAA,UAAA,IAAA,CACAH,GAAAH,GAAA,MACAG,EAAA,WAAA,CAAAH,CAAA,EAAA,MAAA,QAAA,IAAA,CACA,EACA,CAAAA,EAAAG,CAAA,CAAA,EAEAG,EAAAA,UAAA,IAAA,CACAH,GAAAF,GAAA,MACAE,EAAA,SAAAF,CAAA,EAAA,MAAA,QAAA,IAAA,CACA,EACA,CAAAA,EAAAE,CAAA,CAAA,EAEAD,EAAAK,EAAAA,IAAAC,EAAAA,SAAA,CAAA,SAAAN,CAAA,CAAA,EAAA,IACA;;;;;;;;;"}