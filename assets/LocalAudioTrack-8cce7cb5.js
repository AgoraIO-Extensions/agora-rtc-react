import{k as c}from"./quick-mechanical-keyboard-14391-c203a4f2.js";import{h as d,b as m,u as h}from"./TrackBoundary-32089e08.js";import{F as p}from"./local-track-014e8716.js";import{j as n}from"./jsx-runtime-1a9d9a93.js";import{r as s}from"./index-8b3efc3f.js";class r extends p{constructor({audioURI:e=c,volume:t=100,...i}={}){super({...i,trackMediaType:"audio"}),this._volume=Math.max(0,Math.min(100,t)),this._audioURI=e,d(this,"_audioEl","_volume","_audioURI")}static create(e){return new r(e)}play(){this._audioEl||(this._audioEl=document.createElement("audio"),this._audioEl.loop=!0,document.body.appendChild(this._audioEl)),this._audioEl.src=this._audioURI,this._audioEl.muted=this.muted,this._audioEl.volume=this._volume/100,this.enabled&&this._audioEl&&(this.isPlaying=!0,this._audioEl.play().catch(console.log))}stop(){this.isPlaying&&this._audioEl&&(this.isPlaying=!1,this._audioEl.pause())}async setMuted(e){super.setMuted(e),this._audioEl&&(this._audioEl.muted=e)}setVolume(e){e=Math.max(0,Math.min(100,e)),this._volume!==e&&(this._volume=e,this._audioEl&&(this._audioEl.volume=e/100))}getVolumeLevel(){return this._volume/100}async setPlaybackDevice(e){console.log("[FakeLocalAudioTrack]: setPlaybackDevice",e)}startProcessAudioBuffer(){}stopProcessAudioBuffer(){}}function f({track:u,play:e=!1,volume:t,disabled:i,muted:o,children:l}){const a=m(u);return h(a,e),s.useEffect(()=>{a&&t!=null&&a.setVolume(t)},[a,t]),s.useEffect(()=>{a&&i!=null&&a.setEnabled(!i).catch(console.warn)},[i,a]),s.useEffect(()=>{a&&o!=null&&a.setMuted(o).catch(console.warn)},[o,a]),l?n.jsx(n.Fragment,{children:l}):null}f.__docgenInfo={description:`This component plays the local audio track using the playback device selected by the user in the browser.
@example
\`\`\`jsx
import { LocalAudioTrack, useLocalAudioTrack } from "agora-rtc-react";

function App() {
  const audioTrack = useLocalAudioTrack();
  return <LocalAudioTrack track={audioTrack} play />;
}
\`\`\``,methods:[],displayName:"LocalAudioTrack",props:{track:{required:!1,tsType:{name:"union",raw:"T | PromiseLike<T>",elements:[{name:"union",raw:"T | null | undefined",elements:[{name:"T"},{name:"null"},{name:"undefined"}]},{name:"PromiseLike",elements:[{name:"union",raw:"T | null | undefined",elements:[{name:"T"},{name:"null"},{name:"undefined"}]}],raw:"PromiseLike<T>"}]},description:"The local audio track to be played. Call [`useLocalMicrophoneTrack`](https://api-ref.agora.io/en/video-sdk/reactjs/2.x/functions/useLocalMicrophoneTrack.html) to create a local audio track."},play:{required:!1,tsType:{name:"boolean"},description:"`true`: Play the track.`false`: Stop playing the track.",defaultValue:{value:"false",computed:!1}},volume:{required:!1,tsType:{name:"number"},description:"The volume. The value ranges from 0 (mute) to 1000 (maximum). A value of 100 is the original volume. When set to above 100, the SDK applies volume amplification using the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API)."},disabled:{required:!1,tsType:{name:"boolean"},description:"`true`: Disable the track. When disabled, the SDK stops playing and publishing the track.`false`: Enable the track."},muted:{required:!1,tsType:{name:"boolean"},description:"`true`: Pause sending media data of the track.`false`: Resume sending media data of the track."},children:{required:!1,tsType:{name:"ReactNode"},description:"The React nodes to be rendered."}}};export{r as F,f as L};
