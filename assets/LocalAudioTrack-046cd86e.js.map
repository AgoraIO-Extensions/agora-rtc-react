{"version":3,"file":"LocalAudioTrack-046cd86e.js","sources":["../../../../node_modules/.pnpm/github.com+AgoraIO-Extensions+agora-rtc-sdk-ng-fake@47f32309fec61037c83de13f215dc38c4f1d3858_m36kdfydr7dzzgmmof7pmgo3nm/node_modules/agora-rtc-sdk-ng-fake/src/tracks/local-audio-track.ts","../../src/components/LocalAudioTrack.tsx"],"sourcesContent":["import type { ILocalAudioTrack } from \"agora-rtc-sdk-ng\";\n\nimport keyboardMp3 from \"../../assets/quick-mechanical-keyboard-14391.mp3\";\nimport { hideProperties } from \"../utils\";\n\nimport type { FakeLocalTrackProps } from \"./local-track\";\nimport { FakeLocalTrack } from \"./local-track\";\n\nexport interface FakeLocalAudioTrackProps extends Omit<FakeLocalTrackProps, \"trackMediaType\"> {\n  audioURI?: string;\n  /** 0~100 */\n  volume?: number;\n}\n\nexport class FakeLocalAudioTrack extends FakeLocalTrack {\n  public static override create(props?: FakeLocalAudioTrackProps): ILocalAudioTrack {\n    return new FakeLocalAudioTrack(props) as unknown as ILocalAudioTrack;\n  }\n\n  private readonly _audioURI: string;\n\n  protected constructor({\n    audioURI = keyboardMp3,\n    volume = 100,\n    ...props\n  }: FakeLocalAudioTrackProps = {}) {\n    super({ ...props, trackMediaType: \"audio\" });\n    this._volume = Math.max(0, Math.min(100, volume));\n    this._audioURI = audioURI;\n\n    hideProperties(this, \"_audioEl\", \"_volume\", \"_audioURI\");\n  }\n  /**\n   * Plays a local audio track on the web page.\n   *\n   * @param element Specifies a DOM element. The SDK will create a `<audio>` element under the specified DOM element to play the audio track. You can specify a DOM element in either of the following ways:\n   * - `string`: Specify the ID of the DOM element.\n   * - `HTMLElement`: Pass a DOM object.\n   * @param config Sets the playback configurations, such as display mode and mirror mode. See [[AudioPlayerConfig]]. By default, the SDK enables mirror mode for a local audio track.\n   */\n  public override play(): void {\n    if (!this._audioEl) {\n      this._audioEl = document.createElement(\"audio\");\n      this._audioEl.loop = true;\n      document.body.appendChild(this._audioEl);\n    }\n\n    this._audioEl.src = this._audioURI;\n    this._audioEl.muted = this.muted;\n    this._audioEl.volume = this._volume / 100;\n\n    if (this.enabled && this._audioEl) {\n      this.isPlaying = true;\n      this._audioEl.play().catch(console.log);\n    }\n  }\n  /**\n   * Stops playing the media track.\n   */\n  public override stop(): void {\n    if (this.isPlaying && this._audioEl) {\n      this.isPlaying = false;\n      this._audioEl.pause();\n    }\n  }\n  /**\n   * Sends or stops sending the media data of the track.\n   *\n   * **Since**\n   * <br>&emsp;&emsp;&emsp;*4.6.0*\n   *\n   * If the track is published, a successful call of `setMuted(true)` triggers the [user-unpublished]{@link IAgoraRTCClient.event_user_unpublished} event on the remote client, and a successful call of `setMuted(false)` triggers the [user-published]{@link IAgoraRTCClient.event_user_published} event.\n   *\n   * > - Calling `setMuted(true)` does not stop capturing audio or audio and takes shorter time to take effect than [[setEnabled]]. For details, see [What are the differences between setEnabled and setMuted?](https://docs.agora.io/en/Interactive%20Broadcast/faq/differences_between_setenabled_and_setmuted).\n   * > - Do not call `setEnabled` and `setMuted` together.\n   *\n   * @param muted Whether to stop sending the media data of the track:\n   * - `true`: Stop sending the media data of the track.\n   * - `false`: Resume sending the media data of the track.\n   */\n  public override async setMuted(muted: boolean): Promise<void> {\n    super.setMuted(muted);\n    if (this._audioEl) {\n      this._audioEl.muted = muted;\n    }\n  }\n  /**\n   * Sets the volume of a local audio track.\n   *\n   * @param volume The volume. The value ranges from 0 (mute) to 1000 (maximum). A value of 100 is the original volumeã€‚ The volume change may not be obvious to human ear. If local track has been published, setting volume will affect the volume heard by remote users.\n   */\n  public setVolume(volume: number): void {\n    volume = Math.max(0, Math.min(100, volume));\n    if (this._volume !== volume) {\n      this._volume = volume;\n      if (this._audioEl) {\n        this._audioEl.volume = volume / 100;\n      }\n    }\n  }\n  /**\n   * Gets the audio level of a local audio track.\n   *\n   * @returns The audio level. The value range is [0,1]. 1 is the highest audio level.\n   * Usually a user with audio level above 0.6 is a speaking user.\n   *\n   */\n  public getVolumeLevel(): number {\n    return this._volume / 100;\n  }\n  /**\n   * **Since**\n   * <br>&emsp;&emsp;&emsp;*4.1.0*\n   *\n   * > Note:\n   * > - As of v4.7.0, this method no longer takes effect. Use IRemoteAudioTrack.setPlaybackDevice() instead.\n   * > - This method supports Chrome on desktop devices only. Other browsers throw a '`NOT_SUPPORTED` error when calling this method.\n   *\n   * Sets the playback device (speaker) for the remote audio stream.\n   *\n   * @param deviceId The device ID, which can be retrieved by calling [[getPlaybackDevices]].\n   */\n  public async setPlaybackDevice(deviceId: string): Promise<void> {\n    console.log(\"[FakeLocalAudioTrack]: setPlaybackDevice\", deviceId);\n  }\n\n  private _audioEl?: HTMLAudioElement;\n  private _volume: number;\n}\n","import type { ILocalAudioTrack } from \"agora-rtc-sdk-ng\";\nimport type { ReactNode } from \"react\";\nimport { useEffect } from \"react\";\n\nimport { useAwaited } from \"../hooks/tools\";\nimport type { MaybePromiseOrNull } from \"../misc/utils\";\n\nimport { useAutoPlayAudioTrack } from \"./TrackBoundary\";\n\nexport interface LocalAudioTrackProps {\n  /**\n   * The local audio track to be played. Call [`useLocalMicrophoneTrack`](https://api-ref.agora.io/en/video-sdk/reactjs/2.x/functions/useLocalMicrophoneTrack.html) to create a local audio track.\n   */\n  readonly track?: MaybePromiseOrNull<ILocalAudioTrack>;\n\n  /**\n   * `true`: Play the track.`false`: Stop playing the track.\n   */\n  readonly play?: boolean;\n\n  /**\n   * The volume. The value ranges from 0 (mute) to 1000 (maximum). A value of 100 is the original volume. When set to above 100, the SDK applies volume amplification using the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API).\n   */\n  readonly volume?: number;\n\n  /**\n   * `true`: Disable the track. When disabled, the SDK stops playing and publishing the track.`false`: Enable the track.\n   */\n  readonly disabled?: boolean;\n\n  /**\n   * `true`: Pause sending media data of the track.`false`: Resume sending media data of the track.\n   */\n  readonly muted?: boolean;\n\n  /**\n   * The React nodes to be rendered.\n   */\n  readonly children?: ReactNode;\n}\n\n/**\n * This component plays the local audio track using the playback device selected by the user in the browser.\n * @example\n * ```jsx\n * import { LocalAudioTrack, useLocalAudioTrack } from \"agora-rtc-react\";\n *\n * function App() {\n *   const audioTrack = useLocalAudioTrack();\n *   return <LocalAudioTrack track={audioTrack} play />;\n * }\n * ```\n */\nexport function LocalAudioTrack({\n  track: maybeTrack,\n  play = false,\n  volume,\n  disabled,\n  muted,\n  children,\n}: LocalAudioTrackProps) {\n  const track = useAwaited(maybeTrack);\n\n  useAutoPlayAudioTrack(track, play);\n\n  useEffect(() => {\n    if (track && volume != null) {\n      track.setVolume(volume);\n    }\n  }, [track, volume]);\n\n  useEffect(() => {\n    if (track && disabled != null) {\n      track.setEnabled(!disabled).catch(console.warn);\n    }\n  }, [disabled, track]);\n\n  useEffect(() => {\n    if (track && muted != null) {\n      track.setMuted(muted).catch(console.warn);\n    }\n  }, [muted, track]);\n\n  return children ? <>{children}</> : null;\n}\n"],"names":["FakeLocalAudioTrack","FakeLocalTrack","audioURI","keyboardMp3","volume","props","hideProperties","muted","deviceId","LocalAudioTrack","maybeTrack","play","disabled","children","track","useAwaited","useAutoPlayAudioTrack","useEffect","jsx","Fragment"],"mappings":"oQAcO,MAAMA,UAA4BC,CAAe,CAO5C,YAAY,CACpB,SAAAC,EAAWC,EACX,OAAAC,EAAS,IACT,GAAGC,CACL,EAA8B,GAAI,CAChC,MAAM,CAAE,GAAGA,EAAO,eAAgB,OAAS,CAAA,EACtC,KAAA,QAAU,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKD,CAAM,CAAC,EAChD,KAAK,UAAYF,EAEFI,EAAA,KAAM,WAAY,UAAW,WAAW,CACzD,CAhBA,OAAuB,OAAOD,EAAoD,CACzE,OAAA,IAAIL,EAAoBK,CAAK,CACtC,CAuBgB,MAAa,CACtB,KAAK,WACH,KAAA,SAAW,SAAS,cAAc,OAAO,EAC9C,KAAK,SAAS,KAAO,GACZ,SAAA,KAAK,YAAY,KAAK,QAAQ,GAGpC,KAAA,SAAS,IAAM,KAAK,UACpB,KAAA,SAAS,MAAQ,KAAK,MACtB,KAAA,SAAS,OAAS,KAAK,QAAU,IAElC,KAAK,SAAW,KAAK,WACvB,KAAK,UAAY,GACjB,KAAK,SAAS,KAAA,EAAO,MAAM,QAAQ,GAAG,EAE1C,CAIgB,MAAa,CACvB,KAAK,WAAa,KAAK,WACzB,KAAK,UAAY,GACjB,KAAK,SAAS,QAElB,CAgBA,MAAsB,SAASE,EAA+B,CAC5D,MAAM,SAASA,CAAK,EAChB,KAAK,WACP,KAAK,SAAS,MAAQA,EAE1B,CAMO,UAAUH,EAAsB,CACrCA,EAAS,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKA,CAAM,CAAC,EACtC,KAAK,UAAYA,IACnB,KAAK,QAAUA,EACX,KAAK,WACF,KAAA,SAAS,OAASA,EAAS,KAGtC,CAQO,gBAAyB,CAC9B,OAAO,KAAK,QAAU,GACxB,CAaA,MAAa,kBAAkBI,EAAiC,CACtD,QAAA,IAAI,2CAA4CA,CAAQ,CAClE,CAIF,CC3EA,SAAAC,EAAA,CACA,MAAAC,EACA,KAAAC,EAAA,GACA,OAAAP,EACA,SAAAQ,EACA,MAAAL,EACA,SAAAM,CACA,EAAA,CACA,MAAAC,EAAAC,EAAAL,CAAA,EAEA,OAAAM,EAAAF,EAAAH,CAAA,EAEAM,EAAAA,UAAA,IAAA,CACAH,GAAAV,GAAA,MACAU,EAAA,UAAAV,CAAA,CACA,EACA,CAAAU,EAAAV,CAAA,CAAA,EAEAa,EAAAA,UAAA,IAAA,CACAH,GAAAF,GAAA,MACAE,EAAA,WAAA,CAAAF,CAAA,EAAA,MAAA,QAAA,IAAA,CACA,EACA,CAAAA,EAAAE,CAAA,CAAA,EAEAG,EAAAA,UAAA,IAAA,CACAH,GAAAP,GAAA,MACAO,EAAA,SAAAP,CAAA,EAAA,MAAA,QAAA,IAAA,CACA,EACA,CAAAA,EAAAO,CAAA,CAAA,EAEAD,EAAAK,EAAAA,IAAAC,EAAAA,SAAA,CAAA,SAAAN,CAAA,CAAA,EAAA,IACA;;;;;;;;;","x_google_ignoreList":[0]}