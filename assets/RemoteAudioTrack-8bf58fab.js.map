{"version":3,"file":"RemoteAudioTrack-8bf58fab.js","sources":["../../src/components/RemoteAudioTrack.tsx"],"sourcesContent":["import type { IRemoteAudioTrack } from \"agora-rtc-sdk-ng\";\nimport type { ReactNode } from \"react\";\nimport { useEffect } from \"react\";\n\nimport type { Nullable } from \"../misc/utils\";\n\nimport { useAutoPlayAudioTrack } from \"./TrackBoundary\";\n\nexport interface RemoteAudioTrackProps {\n  /**\n   * The remote audio track to be played.\n   */\n  readonly track?: Nullable<IRemoteAudioTrack>;\n\n  /**\n   * `true`: Play the track.`false`: Stop playing the track.\n   */\n  readonly play?: boolean;\n\n  /**\n   * The ID of the playback device, such as a speaker. The device ID can be obtained using [`IAgoraRTC.getPlaybackDevices`](https://api-ref.agora.io/en/video-sdk/web/4.x/interfaces/iagorartc.html#getplaybackdevices). This property is only supported in the desktop version of Chrome browser. Modifying the value of this property in other browsers throws a `NOT_SUPPORTED` error.\n   */\n  readonly playbackDeviceId?: string;\n\n  /**\n   * The volume. The value ranges from 0 (mute) to 100 (the original volume).\n   */\n  readonly volume?: number;\n\n  /**\n   * The React nodes to be rendered.\n   */\n  readonly children?: ReactNode;\n}\n\n/**\n * This component plays the audio track of a remote user with the playback device you specify.\n * @example\n * ```jsx\n * import { RemoteAudioTrack, useJoin, useRemoteAudioTracks, useRemoteUsers } from \"agora-rtc-react\";\n *\n * function App() {\n *   const remoteUsers = useRemoteUsers();\n *   const audioTracks = useRemoteAudioTracks(remoteUsers);\n *\n *   return (\n *     <>\n *       {audioTracks.map(track => (\n *         <RemoteAudioTrack key={track.getUserId()} play track={track} />\n *       ))}\n *     </>\n *   );\n * }\n * ```\n */\nexport function RemoteAudioTrack({\n  track,\n  play = false,\n  playbackDeviceId,\n  volume,\n  children,\n}: RemoteAudioTrackProps) {\n  useAutoPlayAudioTrack(track, play);\n\n  useEffect(() => {\n    if (track && playbackDeviceId != null) {\n      track.setPlaybackDevice(playbackDeviceId).catch(console.warn);\n    }\n  }, [track, playbackDeviceId]);\n\n  useEffect(() => {\n    if (track && volume != null) {\n      track.setVolume(volume);\n    }\n  }, [track, volume]);\n\n  return children ? <>{children}</> : null;\n}\n"],"names":["RemoteAudioTrack","track","play","playbackDeviceId","volume","children","useAutoPlayAudioTrack","useEffect","jsx","Fragment"],"mappings":"sIAuDA,SAAAA,EAAA,CACA,MAAAC,EACA,KAAAC,EAAA,GACA,iBAAAC,EACA,OAAAC,EACA,SAAAC,CACA,EAAA,CACA,OAAAC,EAAAL,EAAAC,CAAA,EAEAK,EAAAA,UAAA,IAAA,CACAN,GAAAE,GAAA,MACAF,EAAA,kBAAAE,CAAA,EAAA,MAAA,QAAA,IAAA,CACA,EACA,CAAAF,EAAAE,CAAA,CAAA,EAEAI,EAAAA,UAAA,IAAA,CACAN,GAAAG,GAAA,MACAH,EAAA,UAAAG,CAAA,CACA,EACA,CAAAH,EAAAG,CAAA,CAAA,EAEAC,EAAAG,EAAAA,IAAAC,EAAAA,SAAA,CAAA,SAAAJ,CAAA,CAAA,EAAA,IACA;;;;;;;;;;;;;;;;;"}