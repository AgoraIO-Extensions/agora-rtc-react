{"version":3,"file":"Devices.stories-8f2defaf.js","sources":["../../src/stories/Devices.stories.tsx"],"sourcesContent":["import { randFood, randNumber, randUuid, seed } from \"@ngneat/falso\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport { useEffect, useMemo, useState } from \"react\";\nconst meta: Meta = {\n  title: \"Recipes/Devices\",\n  tags: [\"autodocs\"]\n};\nexport default meta;\n\n/**\n * **Note**: You should call `AgoraRTC.getDevices()` to get real data.\n */\nfunction getDevices(): Promise<MediaDeviceInfo[]> {\n  const fakeDevices: MediaDeviceInfo[] = [];\n  let n: number;\n  n = randNumber({\n    min: 1,\n    max: 10\n  });\n  while (n--) fakeDevices.push(fakeDevice(\"audioinput\"));\n  n = randNumber({\n    min: 1,\n    max: 10\n  });\n  while (n--) fakeDevices.push(fakeDevice(\"audiooutput\"));\n  n = randNumber({\n    min: 1,\n    max: 10\n  });\n  while (n--) fakeDevices.push(fakeDevice(\"videoinput\"));\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate user denies access to media devices.\n      if (Math.random() < 0.5) {\n        reject(new Error(\"Permission denied\"));\n      }\n      resolve(fakeDevices);\n    }, 1000);\n  });\n}\nfunction fakeDevice(kind: MediaDeviceKind): MediaDeviceInfo {\n  seed(kind);\n  const groupId = randUuid();\n  seed();\n  return {\n    deviceId: randUuid(),\n    groupId,\n    kind,\n    label: randFood(),\n    toJSON() {\n      return this.deviceId;\n    }\n  };\n}\nexport const Devices: StoryObj = {\n  render: function Devices() {\n    const [loading, setLoading] = useState(true);\n    const [devices, setDevices] = useState<MediaDeviceInfo[]>([]);\n    const [hasError, setError] = useState(false);\n    useEffect(() => {\n      let isMounted = true;\n      getDevices().then(devices => {\n        if (isMounted) setDevices(devices);\n      })\n      // **Note**: Make sure to handle errors that may occur when user denies access to media devices.\n      .catch(() => {\n        if (isMounted) setError(true);\n      }).finally(() => {\n        if (isMounted) setLoading(false);\n      });\n      return () => {\n        isMounted = false;\n      };\n    }, []);\n    const audioInputs = useMemo(() => devices.filter(e => e.kind === \"audioinput\"), [devices]);\n    const audioOutputs = useMemo(() => devices.filter(e => e.kind === \"audiooutput\"), [devices]);\n    const videoInputs = useMemo(() => devices.filter(e => e.kind === \"videoinput\"), [devices]);\n    const [micDeviceId, setMicDeviceId] = useState(\"\");\n    // select first mic device if current mic device is not available\n    useEffect(() => {\n      if (audioInputs.length > 0 && !audioInputs.some(e => e.deviceId === micDeviceId)) {\n        setMicDeviceId(audioInputs[0].deviceId);\n      }\n    }, [audioInputs, micDeviceId]);\n    const [playbackDeviceId, setPlaybackDeviceId] = useState(\"\");\n    useEffect(() => {\n      if (audioOutputs.length > 0 && !audioOutputs.some(e => e.deviceId === playbackDeviceId)) {\n        setPlaybackDeviceId(audioOutputs[0].deviceId);\n      }\n    }, [audioOutputs, playbackDeviceId]);\n    const [cameraDeviceId, setCameraDeviceId] = useState(\"\");\n    useEffect(() => {\n      if (videoInputs.length > 0 && !videoInputs.some(e => e.deviceId === cameraDeviceId)) {\n        setCameraDeviceId(videoInputs[0].deviceId);\n      }\n    }, [videoInputs, cameraDeviceId]);\n    return <div>\n        <h1>Devices</h1>\n        {hasError ? <p>Failed to get devices.</p> : loading ? <div>Fetching devices...</div> : <div style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 4\n      }}>\n            <label>\n              <span>Microphone:&nbsp;</span>\n              <select onChange={e => setMicDeviceId(e.target.value)}>\n                {audioInputs.map(({\n              deviceId,\n              label\n            }) => <option key={deviceId} value={deviceId}>\n                    {label || \"default\"}\n                  </option>)}\n              </select>\n            </label>\n            <label>\n              <span>Camera:&nbsp;</span>\n              <select onChange={e => setCameraDeviceId(e.target.value)}>\n                {videoInputs.map(({\n              deviceId,\n              label\n            }) => <option key={deviceId} value={deviceId}>\n                    {label || \"default\"}\n                  </option>)}\n              </select>\n            </label>\n            <label>\n              <span>Playback:&nbsp;</span>\n              <select onChange={e => setMicDeviceId(e.target.value)}>\n                {audioOutputs.map(({\n              deviceId,\n              label\n            }) => <option key={deviceId} value={deviceId}>\n                    {label || \"default\"}\n                  </option>)}\n              </select>\n            </label>\n          </div>}\n      </div>;\n  },\n  parameters: {\n    options: {\n      showPanel: false\n    }\n  }\n};\nDevices.parameters = {\n  ...Devices.parameters,\n  docs: {\n    ...Devices.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: function Devices() {\\n    const [loading, setLoading] = useState(true);\\n    const [devices, setDevices] = useState<MediaDeviceInfo[]>([]);\\n    const [hasError, setError] = useState(false);\\n    useEffect(() => {\\n      let isMounted = true;\\n      getDevices().then(devices => {\\n        if (isMounted) setDevices(devices);\\n      })\\n      // **Note**: Make sure to handle errors that may occur when user denies access to media devices.\\n      .catch(() => {\\n        if (isMounted) setError(true);\\n      }).finally(() => {\\n        if (isMounted) setLoading(false);\\n      });\\n      return () => {\\n        isMounted = false;\\n      };\\n    }, []);\\n    const audioInputs = useMemo(() => devices.filter(e => e.kind === \\\"audioinput\\\"), [devices]);\\n    const audioOutputs = useMemo(() => devices.filter(e => e.kind === \\\"audiooutput\\\"), [devices]);\\n    const videoInputs = useMemo(() => devices.filter(e => e.kind === \\\"videoinput\\\"), [devices]);\\n    const [micDeviceId, setMicDeviceId] = useState(\\\"\\\");\\n    // select first mic device if current mic device is not available\\n    useEffect(() => {\\n      if (audioInputs.length > 0 && !audioInputs.some(e => e.deviceId === micDeviceId)) {\\n        setMicDeviceId(audioInputs[0].deviceId);\\n      }\\n    }, [audioInputs, micDeviceId]);\\n    const [playbackDeviceId, setPlaybackDeviceId] = useState(\\\"\\\");\\n    useEffect(() => {\\n      if (audioOutputs.length > 0 && !audioOutputs.some(e => e.deviceId === playbackDeviceId)) {\\n        setPlaybackDeviceId(audioOutputs[0].deviceId);\\n      }\\n    }, [audioOutputs, playbackDeviceId]);\\n    const [cameraDeviceId, setCameraDeviceId] = useState(\\\"\\\");\\n    useEffect(() => {\\n      if (videoInputs.length > 0 && !videoInputs.some(e => e.deviceId === cameraDeviceId)) {\\n        setCameraDeviceId(videoInputs[0].deviceId);\\n      }\\n    }, [videoInputs, cameraDeviceId]);\\n    return <div>\\n        <h1>Devices</h1>\\n        {hasError ? <p>Failed to get devices.</p> : loading ? <div>Fetching devices...</div> : <div style={{\\n        display: \\\"flex\\\",\\n        flexDirection: \\\"column\\\",\\n        gap: 4\\n      }}>\\n            <label>\\n              <span>Microphone:&nbsp;</span>\\n              <select onChange={e => setMicDeviceId(e.target.value)}>\\n                {audioInputs.map(({\\n              deviceId,\\n              label\\n            }) => <option key={deviceId} value={deviceId}>\\n                    {label || \\\"default\\\"}\\n                  </option>)}\\n              </select>\\n            </label>\\n            <label>\\n              <span>Camera:&nbsp;</span>\\n              <select onChange={e => setCameraDeviceId(e.target.value)}>\\n                {videoInputs.map(({\\n              deviceId,\\n              label\\n            }) => <option key={deviceId} value={deviceId}>\\n                    {label || \\\"default\\\"}\\n                  </option>)}\\n              </select>\\n            </label>\\n            <label>\\n              <span>Playback:&nbsp;</span>\\n              <select onChange={e => setMicDeviceId(e.target.value)}>\\n                {audioOutputs.map(({\\n              deviceId,\\n              label\\n            }) => <option key={deviceId} value={deviceId}>\\n                    {label || \\\"default\\\"}\\n                  </option>)}\\n              </select>\\n            </label>\\n          </div>}\\n      </div>;\\n  },\\n  parameters: {\\n    options: {\\n      showPanel: false\\n    }\\n  }\\n}\",\n      ...Devices.parameters?.docs?.source\n    }\n  }\n};"],"names":["meta","getDevices","fakeDevices","n","randNumber","fakeDevice","resolve","reject","kind","seed","groupId","randUuid","randFood","Devices","loading","setLoading","useState","devices","setDevices","hasError","setError","useEffect","isMounted","audioInputs","useMemo","audioOutputs","videoInputs","micDeviceId","setMicDeviceId","playbackDeviceId","setPlaybackDeviceId","cameraDeviceId","setCameraDeviceId","jsx","jsxs","deviceId","label","_a","_c","_b"],"mappings":"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"}