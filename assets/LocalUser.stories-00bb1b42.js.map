{"version":3,"file":"LocalUser.stories-00bb1b42.js","sources":["../../../../node_modules/.pnpm/@agoraio-extensions+agora-rtc-sdk-ng-fake@https+++codeload.github.com+AgoraIO-Extensions+agor_4ipwkzf26pg57ngg64nj7kljyq/node_modules/@agoraio-extensions/agora-rtc-sdk-ng-fake/src/tracks/camera-video-track.ts","../../../../node_modules/.pnpm/@agoraio-extensions+agora-rtc-sdk-ng-fake@https+++codeload.github.com+AgoraIO-Extensions+agor_4ipwkzf26pg57ngg64nj7kljyq/node_modules/@agoraio-extensions/agora-rtc-sdk-ng-fake/src/tracks/microphone-audio-track.ts","../../src/components/LocalUser.tsx"],"sourcesContent":["import type { ICameraVideoTrack } from \"agora-rtc-sdk-ng\";\n\nimport type { FakeLocalVideoTrackProps } from \"./local-video-track\";\nimport { FakeLocalVideoTrack } from \"./local-video-track\";\n\nexport interface FakeCameraVideoTrackProps extends FakeLocalVideoTrackProps {}\n\nexport class FakeCameraVideoTrack extends FakeLocalVideoTrack {\n  public static override create(props?: FakeCameraVideoTrackProps): ICameraVideoTrack {\n    return new FakeCameraVideoTrack(props) as unknown as ICameraVideoTrack;\n  }\n  /**\n   * Sets the device for capturing video.\n   *\n   * > You can call this method either before or after publishing the video track.\n   *\n   * @param deviceId The ID of the specified device. You can get the `deviceId` by calling AgoraRTC.getCameras().\n   */\n  public async setDevice(deviceId: string): Promise<void> {\n    console.log(\"[FakeCameraVideoTrack]: setDevice\", deviceId);\n  }\n}\n","import type { IMicrophoneAudioTrack } from \"agora-rtc-sdk-ng\";\n\nimport type { FakeLocalAudioTrackProps } from \"./local-audio-track\";\nimport { FakeLocalAudioTrack } from \"./local-audio-track\";\n\nexport interface FakeMicrophoneAudioTrackProps extends FakeLocalAudioTrackProps {}\n\nexport class FakeMicrophoneAudioTrack extends FakeLocalAudioTrack {\n  public static override create(props?: FakeMicrophoneAudioTrackProps): IMicrophoneAudioTrack {\n    return new FakeMicrophoneAudioTrack(props) as unknown as IMicrophoneAudioTrack;\n  }\n  /**\n   * Sets the device for sampling audio.\n   *\n   * > You can call the method either before or after publishing an audio track.\n   *\n   * @param deviceId The ID of the specified device. You can get the `deviceId` by calling AgoraRTC.getMicrophones().\n   */\n  public async setDevice(deviceId: string): Promise<void> {\n    console.log(\"[FakeMicrophoneAudioTrack]: setDevice\", deviceId);\n  }\n}\n","import type { ILocalAudioTrack, ILocalVideoTrack } from \"agora-rtc-sdk-ng\";\nimport type { HTMLProps, ReactNode } from \"react\";\n\nimport { FloatBoxStyle, VideoTrackWrapperStyle, useMergedStyle } from \"../assets/styles\";\nimport type { MaybePromiseOrNull } from \"../misc/utils\";\n\nimport { LocalAudioTrack } from \"./LocalAudioTrack\";\nimport { LocalVideoTrack } from \"./LocalVideoTrack\";\nimport { UserCover } from \"./UserCover\";\n\nexport interface LocalUserProps extends HTMLProps<HTMLDivElement> {\n  /**\n   * `true`: Enable the local user's microphone.`false`: Disable the local user's microphone.\n   */\n  readonly micOn?: boolean;\n\n  /**\n   * `true`: Enable the local user's camera.`false`: Disable the local user's camera.\n   */\n  readonly cameraOn?: boolean;\n\n  /**\n   * The microphone audio track to be played, which can be created by calling [`useLocalMicrophoneTrack`](https://api-ref.agora.io/en/video-sdk/reactjs/2.x/functions/useLocalMicrophoneTrack.html).\n   */\n  readonly audioTrack?: MaybePromiseOrNull<ILocalAudioTrack>;\n\n  /**\n   * The camera video track to be played, which can be created by calling [`useLocalCameraTrack`](https://api-ref.agora.io/en/video-sdk/reactjs/2.x/functions/useLocalCameraTrack.html).\n   */\n  readonly videoTrack?: MaybePromiseOrNull<ILocalVideoTrack>;\n\n  /**\n   * `true`: Play the local user's audio track.`false`: Stop playing the local user's audio track.\n   */\n  readonly playAudio?: boolean;\n\n  /**\n   * `true`: Play the local user's video track.`false`: Stop playing the local user's video track.\n   */\n  readonly playVideo?: boolean;\n\n  /**\n   * The volume. The value ranges from 0 (mute) to 1000 (maximum). A value of 100 is the original volume. When set to above 100, the SDK applies volume amplification using the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API).\n   */\n  readonly volume?: number;\n\n  /**\n   * The cover image to be displayed when `playVideo` is `false`, replacing the video frame. You can pass the URL of an online image or the relative path of a local image.\n   */\n  readonly cover?: string;\n\n  /**\n   * The React nodes to be rendered.\n   */\n  readonly children?: ReactNode;\n}\n\n/**\n * This component plays the camera video track and the microphone audio track of the local user using the playback devices selected by the user in the browser.\n * @example\n * ```jsx\n * import { LocalUser, useLocalAudioTrack, useLocalCameraTrack } from \"agora-rtc-react\";\n *\n * function App() {\n *   const audioTrack = useLocalAudioTrack();\n *   const videoTrack = useLocalCameraTrack();\n *\n *   return (\n *     <LocalUser\n *       audioTrack={audioTrack}\n *       cameraOn\n *       cover={COVER_IMAGE_URL}\n *       micOn\n *       playAudio\n *       playVideo\n *       videoTrack={videoTrack}\n *     />\n *   );\n * }\n * ```\n */\nexport function LocalUser({\n  micOn,\n  cameraOn,\n  audioTrack,\n  videoTrack,\n  playAudio,\n  playVideo,\n  volume,\n  cover,\n  children,\n  style,\n  ...props\n}: LocalUserProps) {\n  const mergedStyle = useMergedStyle(VideoTrackWrapperStyle, style);\n  playVideo = playVideo ?? !!cameraOn;\n  playAudio = playAudio ?? !!micOn;\n  return (\n    <div {...props} style={mergedStyle}>\n      <LocalVideoTrack disabled={!cameraOn} play={playVideo} track={videoTrack} />\n      <LocalAudioTrack disabled={!micOn} play={playAudio} track={audioTrack} volume={volume} />\n      {cover && !cameraOn && <UserCover cover={cover} />}\n      <div style={FloatBoxStyle}>{children}</div>\n    </div>\n  );\n}\n"],"names":["FakeCameraVideoTrack","FakeLocalVideoTrack","props","deviceId","FakeMicrophoneAudioTrack","FakeLocalAudioTrack","LocalUser","micOn","cameraOn","audioTrack","videoTrack","playAudio","playVideo","volume","cover","children","style","mergedStyle","useMergedStyle","VideoTrackWrapperStyle","jsxs","jsx","LocalVideoTrack","LocalAudioTrack","UserCover","FloatBoxStyle"],"mappings":"qoBAOO,MAAMA,UAA6BC,CAAoB,CAC5D,OAAuB,OAAOC,EAAsD,CAC3E,OAAA,IAAIF,EAAqBE,CAAK,CACvC,CAQA,MAAa,UAAUC,EAAiC,CAC9C,QAAA,IAAI,oCAAqCA,CAAQ,CAC3D,CACF,CCdO,MAAMC,UAAiCC,CAAoB,CAChE,OAAuB,OAAOH,EAA8D,CACnF,OAAA,IAAIE,EAAyBF,CAAK,CAC3C,CAQA,MAAa,UAAUC,EAAiC,CAC9C,QAAA,IAAI,wCAAyCA,CAAQ,CAC/D,CACF,CC4DA,SAAAG,EAAA,CACA,MAAAC,EACA,SAAAC,EACA,WAAAC,EACA,WAAAC,EACA,UAAAC,EACA,UAAAC,EACA,OAAAC,EACA,MAAAC,EACA,SAAAC,EACA,MAAAC,EACA,GAAAd,CACA,EAAA,CACA,MAAAe,EAAAC,EAAAC,EAAAH,CAAA,EACA,OAAAJ,EAAAA,GAAA,CAAA,CAAAJ,EACAG,EAAAA,GAAA,CAAA,CAAAJ,EAEAa,EAAAA,KAAA,MAAA,CAAA,GAAAlB,EAAA,MAAAe,EACA,SAAA,CAAAI,MAAAC,GAAA,SAAA,CAAAd,EAAA,KAAAI,EAAA,MAAAF,EAAA,EACAW,EAAAA,IAAAE,GAAA,SAAA,CAAAhB,EAAA,KAAAI,EAAA,MAAAF,EAAA,OAAAI,EAAA,EACAC,GAAA,CAAAN,GAAAa,EAAAA,IAAAG,GAAA,MAAAV,CAAA,CAAA,EACAO,EAAAA,IAAA,MAAA,CAAA,MAAAI,EAAA,SAAAV,CAAA,CAAA,CACA,CAAA,CAAA,CAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","x_google_ignoreList":[0,1]}